///////////////////////////////
// Configuracao StructureMap
          ObjectFactory.Initialize(x =>
                        {
                            x.Scan(scan =>
                                    {
                                        scan.TheCallingAssembly();
                                        scan.AssemblyContainingType(typeof(Repositorio<>));
                                        scan.ConnectImplementationsToTypesClosing(typeof(Repositorio<>));                                        
                                        scan.WithDefaultConventions();
                                    });
            
                        });
///////////////////////////////
// Construtor Com DI

		public ConferenciaController(IRepositorioDeConferencias repositorio)
		{
			_repositorio = repositorio;
		}
		
///////////////////////////////
--------------------------
///////////////////////////////
// ViewModelProfile
public class ViewModelProfile : Profile
{
	protected override void Configure()
	{
		CreateMap<Conferencia, ConferenciaListarModelo>();
		CreateMap<Conferencia, ConferenciaMostrarModelo>();
		CreateMap<Palestra, ConferenciaMostrarModelo.ModeloPalestra>();
		CreateMap<Participante, ConferenciaMostrarModelo.ModeloParticipante>();
	}
}
///////////////////////////////
// EditModelProfile	
public class EditModelProfile : Profile
	{
		protected override void Configure()
		{
			CreateMap<Conferencia, ConferenciaEditarModelo>();
			CreateMap<Participante, ConferenciaEditarModelo.ParticipanteEditarModelo>();
		}
	}	
///////////////////////////////
// Inicializador AutoMapper
Mapper.Initialize(cfg =>
			{
				cfg.AddProfile<ViewModeloProfile>();
				cfg.AddProfile<EditarModeloProfile>();
			});	
///////////////////////////////
// Global.asax => Inicializador AutoMapper			
InicializadorAutoMapper.Inicializar();
///////////////////////////////
// Index com Mapper		
public ActionResult Index(int? qtdMinPalestras)
{
	qtdMinPalestras = qtdMinPalestras ?? 0;

	var confs = _repositorio.Query().Where(conf => conf.QuantidadeDePalestras >= qtdMinPalestras).ToArray();

	var modelo = Mapper.Map<Conferencia[], ConferenciaListarModelo[]>(confs);

	return View(modelo);
}
///////////////////////////////
// Mostrar com Mapper		
public ActionResult Mostrar(string nomeEvento)
		{
			var conf = _repositorio.RetornaPeloNome(nomeEvento);

			var modelo = Mapper.Map<Conferencia, ConferenciaMostrarModelo>(conf);

			return View(modelo);
		}
		
///////////////////////////////
// GET: Editar com Mapper				
public ActionResult Editar(string nomeEvento)
{
	var conf = _repositorio.RetornaPeloNome(nomeEvento);

	var modelo = Mapper.Map<Conferencia, ConferenciaEditarModelo>(conf);
	
	return View(modelo);
}
///////////////////////////////
--------------------------
///////////////////////////////
// ConferenciaModelBinder	
private readonly IRepositorioDeConferencias _repositorio;

		public ConferenciaModelBinder(IRepositorioDeConferencias repositorio)
		{
			_repositorio = repositorio;
		}

		public object BindModel(ControllerContext controllerContext,
								ModelBindingContext bindingContext)
		{
			ValueProviderResult value = bindingContext.ValueProvider.GetValue(bindingContext.ModelName);

			var conferencia = _repositorio.RetornaPeloNome(value.AttemptedValue);

			return conferencia;
		}
		
///////////////////////////////
// ConferenciaModelBinderProvider			
		private readonly ConferenciaModelBinder _modelBinder;

		public ConferenciaModelBinderProvider(ConferenciaModelBinder modelBinder)
		{
			_modelBinder = modelBinder;
		}

		public IModelBinder GetBinder(Type modelType)
		{
			return typeof(Conferencia) != modelType ? null : _modelBinder;
		}

///////////////////////////////
// SM IModelBinderProvider Configuration		
scan.AddAllTypesOf<IModelBinderProvider>();
///////////////////////////////
--------------------------
///////////////////////////////
// AutoMapViewResult		
		public Type TipoOrigem { get; private set; } 
		public Type TipoDestino { get; private set; } 
		public ViewResult View { get; private set; }

		public AutoMapViewResult(Type tipoOrigem, Type tipoDestino, ViewResult view)
		{
			TipoOrigem = tipoOrigem;
			TipoDestino = tipoDestino;
			View = view;
		}

		public override void ExecuteResult(ControllerContext context)
		{
			var modelo = Mapper.Map(View.ViewData.Model, TipoOrigem, TipoDestino);

			View.ViewData.Model = modelo;

			View.ExecuteResult(context);
		}

///////////////////////////////
// AutoMapView Helper Method		
		protected AutoMapViewResult AutoMapView<TDestination>(ViewResult viewResult)
		{
			return new AutoMapViewResult(
				viewResult.ViewData.Model.GetType(),
				typeof(TDestination),
				viewResult);
		}		
///////////////////////////////
// Index AutoMapView		
		public ActionResult Index(int? qtdMinPalestras)
		{
			qtdMinPalestras = qtdMinPalestras ?? 0;

			var confs = _repositorio.Query().Where(conf => conf.QuantidadeDePalestras >= qtdMinPalestras).ToArray();

			return AutoMapView<ConferenciaListarModel[]>(View(confs));
		}
///////////////////////////////
// Mostrar AutoMapView	
public ActionResult Mostrar(Conferencia nomeEvento)
{
	return AutoMapView<ConferenciaMostrarModel>(View(nomeEvento));
}

///////////////////////////////
// Editar AutoMapView
public ActionResult Editar(Conferencia nomeEvento)
{
	return AutoMapView<ConferenciaEditarModel>(View(nomeEvento));
}

///////////////////////////////
// ConferenciaEditarModeloHandler
public class ConferenciaEditarModeloHandler : IFormHandler<ConferenciaEditarModel>
	{
		private readonly IRepositorioDeConferencias _repositorio;

		public ConferenciaEditarModeloHandler(IRepositorioDeConferencias repositorio)
		{
			_repositorio = repositorio;
		}

		public void Handle(ConferenciaEditarModel form)
		{
			var conf = _repositorio.RetornaPeloId(form.Id);

			conf.AlterarNome(form.Nome);

			foreach (var participanteEditarModelo in conf.GetParticipantes())
			{
				var participante = conf.RetornaParticipante(participanteEditarModelo.Id);
				participante.AlterarNome(participanteEditarModelo.Nome, participanteEditarModelo.Sobrenome);
				participante.Email = participanteEditarModelo.Email;
			}
		}
	}
	
///////////////////////////////
// SM IFormHandler<> Configuration	
scan.ConnectImplementationsToTypesClosing(typeof(IFormHandler<>));
///////////////////////////////
// FormActionResult<>
		public ViewResult Failure { get; private set; }
		public ActionResult Success { get; private set; }
		public T Form { get; private set; }

		public FormActionResult(T form, ActionResult success, ViewResult failure)
		{
			Form = form;
			Success = success;
			Failure = failure;
		}

		public override void ExecuteResult(ControllerContext context)
		{
			if(!context.Controller.ViewData.ModelState.IsValid)
			{
				Failure.ExecuteResult(context);
				return;
			}

			var handler = DependencyResolver.Current.GetService<IFormHandler<T>>();

			handler.Handle(Form);

			Success.ExecuteResult(context);
		}
	}
///////////////////////////////
// Form Helper Method
		protected FormActionResult<TForm> Form<TForm>(TForm form, ActionResult success)
		{
			var failure = View(form);

			return new FormActionResult<TForm>(form,success,failure);
		}
///////////////////////////////
// POST: Editar com Form Helper Method		
[HttpPost]
public ActionResult Editar(ConferenciaEditarModel form)
{
	var successResult = RedirectToAction("Index");

	return Form(form, successResult);
}